@page "/communications"
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Communications> Logger
@inject NavigationManager Navigation

<PageTitle>Communications</PageTitle>

<h3>Communications Management</h3>
<AuthorizeView>
    <Authorized>
        @if (communications == null)
        {
            <MudProgressCircular Indeterminate="true" />
            <MudText Class="ml-2">Loading communications...</MudText>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                Error: @errorMessage
                <MudButton OnClick="@LoadCommunications" Variant="Variant.Text" Size="Size.Small" Class="ml-2">
                    Retry
                </MudButton>
            </MudAlert>
        }
        else
        {
            <MudTable Items="@communications" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="2" Class="mt-4">
                <ColGroup>
                    <col style="width:80px;" />
                    <col />
                    <col style="width:120px;" />
                    <col style="width:100px;" />
                    <col style="width:140px;" />
                    <col style="width:140px;" />
                    <col style="width:120px;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Subject</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Recipient</MudTh>
                    <MudTh>Created</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="communication">
                    <MudTd DataLabel="ID" Class="pa-3">@communication.Id</MudTd>
                    <MudTd DataLabel="Subject" Class="pa-3">
                        <MudText Typo="Typo.body2" Class="mb-1">@communication.Subject</MudText>
                        @if (!string.IsNullOrEmpty(communication.Message))
                        {
                            <MudText Typo="Typo.caption" Class="text-truncate" Style="max-width: 250px;">
                                @communication.Message
                            </MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Type" Class="pa-3">
                        <MudChip T="string" Size="Size.Small" Color="@GetTypeColor(communication.TypeCode)">
                            @communication.TypeCode
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Status" Class="pa-3">
                        <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(communication.CurrentStatus)">
                            @communication.CurrentStatus
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Recipient" Class="pa-3">@communication.RecipientInfo</MudTd>
                    <MudTd DataLabel="Created" Class="pa-3">
                        <MudText Typo="Typo.body2" Class="mb-1">@communication.CreatedUtc.ToString("MM/dd/yyyy")</MudText>
                        <MudText Typo="Typo.caption">by @communication.CreatedByUserName</MudText>
                    </MudTd>
                    <MudTd DataLabel="" Class="pa-3">
                        <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Primary"
                            OnClick="@(() => ViewDetails(communication.Id))">
                            Details
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }

    </Authorized>
    <NotAuthorized>
        <MudAlert Severity="Severity.Warning" Class="mt-4">
            You must sign in to view communications.
        </MudAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<CommunicationResponse>? communications;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCommunications();
    }

    private async Task LoadCommunications()
    {
        try
        {
            errorMessage = null;
            communications = null;
            StateHasChanged();

            // Call the real API
            var httpClient = HttpClientFactory.CreateClient("API");
            communications = await httpClient.GetFromJsonAsync<IEnumerable<CommunicationResponse>>("api/communications");

            Logger.LogInformation("✅ Successfully loaded {Count} communications", communications?.Count() ?? 0);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Logger.LogError(ex, "❌ Error loading communications from API");
        }
        finally
        {
            StateHasChanged();
        }
    }



    private void ViewDetails(int communicationId)
    {
        Navigation.NavigateTo($"/communications/{communicationId}");
    }

    private Color GetStatusColor(string status)
    {
        return status.ToLower() switch
        {
            "draft" or "created" => Color.Info,
            "queued" or "pending" => Color.Warning,
            "processing" or "in_transit" => Color.Primary,
            "sent" or "delivered" => Color.Success,
            "failed" or "error" => Color.Error,
            "cancelled" => Color.Secondary,
            _ => Color.Default
        };
    }

    private Color GetTypeColor(string typeCode)
    {
        return typeCode.ToLower() switch
        {
            "email" or "eob" => Color.Primary,
            "sms" or "text" => Color.Success,
            "push" => Color.Info,
            "eop" => Color.Warning,
            "id_card" => Color.Secondary,
            _ => Color.Default
        };
    }

}