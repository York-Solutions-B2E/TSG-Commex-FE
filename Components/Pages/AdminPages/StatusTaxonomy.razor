@page "/admin/status-taxonomy"
@using Microsoft.AspNetCore.Authorization
@using TSG_Commex_Shared.DTOs
@using TSG_Commex_Shared.DTOs.Response
@using TSG_Commex_Shared.DTOs.Request
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@inject ILogger<StatusTaxonomy> Logger
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Status Taxonomy</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-4">
    <MudText Typo="Typo.h4" Class="mb-4">Status Taxonomy Management</MudText>
    <MudText Typo="Typo.body1" Class="mb-4">
        Manage communication types and configure which statuses are valid for each type.
    </MudText>
    
    <!-- Communication Types Section -->
    <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-3">Communication Types</MudText>
        
        @if (isLoadingTypes)
        {
            <MudProgressLinear Indeterminate="true" />
        }
        else
        {
            <MudGrid>
                @foreach (var type in communicationTypes)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard>
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@type.DisplayName</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Primary">@type.TypeCode</MudText>
                                <MudText Typo="Typo.body2">@type.Description</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Color="Color.Primary" Size="Size.Small">Configure Statuses</MudButton>
                                <MudButton Color="Color.Warning" Size="Size.Small">Edit</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
                
                <!-- Add New Type Card -->
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Style="border: 2px dashed #ccc; background-color: #fafafa;">
                        <MudCardContent Class="d-flex flex-column align-center justify-center" Style="min-height: 150px;">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary" />
                            <MudText Typo="Typo.h6" Class="mt-2">Add New Type</MudText>
                        </MudCardContent>
                        <MudCardActions Class="justify-center">
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="OpenCreateDialog">Create Type</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        }
    </MudPaper>
    
    <!-- Global Statuses Section -->
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6" Class="mb-3">Global Status Definitions</MudText>
        <MudText Typo="Typo.body2" Class="mb-3">
            These are all available statuses in the system. Map them to communication types above.
        </MudText>
        
        @if (isLoadingStatuses)
        {
            <MudProgressLinear Indeterminate="true" />
        }
        else
        {
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="Creation Phase">
                    <MudSimpleTable Hover="true" Dense="true">
                        <thead>
                            <tr>
                                <th>Status Code</th>
                                <th>Display Name</th>
                                <th>Description</th>
                                <th>Used By</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var status in globalStatuses.Where(s => s.Phase == "Creation"))
                            {
                                <tr>
                                    <td><MudChip T="string" Size="Size.Small" Color="Color.Primary">@status.StatusCode</MudChip></td>
                                    <td>@status.DisplayName</td>
                                    <td>@status.Description</td>
                                    <td>EOB, EOP, ID_CARD</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudTabPanel>
                
                <MudTabPanel Text="Production Phase">
                    <MudSimpleTable Hover="true" Dense="true">
                        <thead>
                            <tr>
                                <th>Status Code</th>
                                <th>Display Name</th>
                                <th>Description</th>
                                <th>Used By</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var status in globalStatuses.Where(s => s.Phase == "Production"))
                            {
                                <tr>
                                    <td><MudChip T="string" Size="Size.Small" Color="Color.Secondary">@status.StatusCode</MudChip></td>
                                    <td>@status.DisplayName</td>
                                    <td>@status.Description</td>
                                    <td>EOB, ID_CARD</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudTabPanel>
                
                <MudTabPanel Text="Logistics Phase">
                    <MudSimpleTable Hover="true" Dense="true">
                        <thead>
                            <tr>
                                <th>Status Code</th>
                                <th>Display Name</th>
                                <th>Description</th>
                                <th>Used By</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var status in globalStatuses.Where(s => s.Phase == "Logistics"))
                            {
                                <tr>
                                    <td><MudChip T="string" Size="Size.Small" Color="Color.Info">@status.StatusCode</MudChip></td>
                                    <td>@status.DisplayName</td>
                                    <td>@status.Description</td>
                                    <td>All Types</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudTabPanel>
                
                <MudTabPanel Text="Terminal Phase">
                    <MudSimpleTable Hover="true" Dense="true">
                        <thead>
                            <tr>
                                <th>Status Code</th>
                                <th>Display Name</th>
                                <th>Description</th>
                                <th>Used By</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var status in globalStatuses.Where(s => s.Phase == "Terminal"))
                            {
                                <tr>
                                    <td><MudChip T="string" Size="Size.Small" Color="Color.Error">@status.StatusCode</MudChip></td>
                                    <td>@status.DisplayName</td>
                                    <td>@status.Description</td>
                                    <td>All Types</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudTabPanel>
            </MudTabs>
        }
    </MudPaper>
</MudContainer>

@code {
    private bool isLoadingTypes = true;
    private bool isLoadingStatuses = true;
    private List<CommunicationTypeResponse> communicationTypes = new();
    private List<GlobalStatusResponse> globalStatuses = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCommunicationTypes();
        await LoadGlobalStatuses();
    }
    
    private async Task LoadCommunicationTypes()
    {
        try
        {
            isLoadingTypes = true;
            var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.GetAsync("api/communication-types");
            if (response.IsSuccessStatusCode)
            {
                communicationTypes = await response.Content.ReadFromJsonAsync<List<CommunicationTypeResponse>>() ?? new();
                Logger.LogInformation("Loaded {Count} communication types", communicationTypes.Count);
            }
            else
            {
                Logger.LogWarning("Failed to load communication types: {StatusCode}", response.StatusCode);
                Snackbar.Add($"Failed to load communication types: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading communication types");
            Snackbar.Add($"Error loading communication types: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingTypes = false;
        }
    }
    
    private async Task LoadGlobalStatuses()
    {
        try
        {
            isLoadingStatuses = true;
            var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.GetAsync("api/global-statuses");
            if (response.IsSuccessStatusCode)
            {
                globalStatuses = await response.Content.ReadFromJsonAsync<List<GlobalStatusResponse>>() ?? new();
                Logger.LogInformation("Loaded {Count} global statuses", globalStatuses.Count);
            }
            else
            {
                Logger.LogWarning("Failed to load global statuses: {StatusCode}", response.StatusCode);
                Snackbar.Add($"Failed to load global statuses: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading global statuses");
            Snackbar.Add($"Error loading global statuses: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingStatuses = false;
        }
    }
    
    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<CreateCommunicationTypeDialog>("Create New Communication Type", parameters, options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadCommunicationTypes(); // Reload the list if a type was created
        }
    }
}