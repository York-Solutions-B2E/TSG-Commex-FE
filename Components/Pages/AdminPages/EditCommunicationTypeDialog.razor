@using TSG_Commex_Shared.DTOs.Request
@using TSG_Commex_Shared.DTOs.Response
@using System.Net.Http.Json
@using TSG_Commex_FE.Components.Shared
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@inject ILogger<EditCommunicationTypeDialog> Logger
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" Style="vertical-align: middle;" />
            Edit Communication Type
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudTextField @bind-Value="model.TypeCode" 
                         Label="Type Code" 
                         Required="true"
                         RequiredError="Type code is required"
                         Placeholder="e.g., WELCOME_KIT"
                         HelperText="Unique identifier for this type (uppercase, no spaces)"
                         Immediate="true"
                         Class="mb-4" />
            
            <MudTextField @bind-Value="model.DisplayName" 
                         Label="Display Name" 
                         Required="true"
                         RequiredError="Display name is required"
                         Placeholder="e.g., Welcome Kit"
                         HelperText="User-friendly name for this type"
                         Immediate="true"
                         Class="mb-4" />
            
            @if (isLoadingStatuses)
            {
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="56px" Class="mb-4" />
                <MudText Typo="Typo.caption" Color="Color.Secondary">Loading statuses...</MudText>
            }
            else
            {
                <MudSelect T="int" @bind-SelectedValues="selectedStatusIds" 
                          Label="Valid Statuses" 
                          MultiSelection="true"
                          SelectAll="true"
                          SelectAllText="Select all statuses"
                          HelperText="Select which statuses are valid for this communication type"
                          Class="mb-4"
                          Variant="Variant.Outlined"
                          AdornmentIcon="@Icons.Material.Filled.CheckBox"
                          AnchorOrigin="Origin.BottomCenter"
                          ToStringFunc="@GetStatusDisplayName">
                    @foreach (var status in globalStatuses)
                    {
                        <MudSelectItem T="int" Value="@status.Id">
                            <div>
                                <MudText Typo="Typo.body1">@status.DisplayName</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@status.Phase - @status.Description</MudText>
                            </div>
                        </MudSelectItem>
                    }
                </MudSelect>
            }
            
            <MudTextField @bind-Value="model.Description" 
                         Label="Description" 
                         Required="true"
                         RequiredError="Description is required"
                         Placeholder="e.g., New member welcome package with important information"
                         Lines="3"
                         HelperText="Detailed description of this communication type"
                         Immediate="true"
                         Class="mb-4" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <div style="display: flex; justify-content: space-between; width: 100%;">
            <MudButton Color="Color.Error" 
                      Variant="Variant.Outlined" 
                      OnClick="ConfirmDelete"
                      Disabled="@(isProcessing || isDeleting)"
                      StartIcon="@Icons.Material.Filled.Delete">
                @if (isDeleting)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Deleting...</MudText>
                }
                else
                {
                    <MudText>Delete Type</MudText>
                }
            </MudButton>
            <div>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          OnClick="Submit"
                          Disabled="@(!isValid || isProcessing || isDeleting)">
                    @if (isProcessing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Updating...</MudText>
                    }
                    else
                    {
                        <MudText>Update Type</MudText>
                    }
                </MudButton>
            </div>
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public CommunicationTypeResponse CommunicationType { get; set; } = default!;
    
    private UpdateCommunicationTypeRequest model = new();
    private bool isValid;
    private bool isProcessing;
    private bool isDeleting;
    private bool isLoadingStatuses = true;
    private MudForm? form;
    private IEnumerable<int> selectedStatusIds = new HashSet<int>();
    private List<GlobalStatusResponse> globalStatuses = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize the model with existing values
        if (CommunicationType != null)
        {
            model.TypeCode = CommunicationType.TypeCode;
            model.DisplayName = CommunicationType.DisplayName;
            model.Description = CommunicationType.Description;
        }
        
        // Load all global statuses first
        await LoadGlobalStatuses();
        
        // Set the selected status IDs after statuses are loaded
        if (CommunicationType?.AssignedStatusIds != null)
        {
            selectedStatusIds = new HashSet<int>(CommunicationType.AssignedStatusIds);
            StateHasChanged(); // Force UI update after setting selected values
        }
    }
    
    private async Task LoadGlobalStatuses()
    {
        try
        {
            isLoadingStatuses = true;
            var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.GetAsync("api/global-statuses");
            
            if (response.IsSuccessStatusCode)
            {
                globalStatuses = await response.Content.ReadFromJsonAsync<List<GlobalStatusResponse>>() ?? new();
                Logger.LogInformation("Loaded {Count} global statuses", globalStatuses.Count);
            }
            else
            {
                Logger.LogWarning("Failed to load global statuses");
                Snackbar.Add("Failed to load statuses", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading global statuses");
            Snackbar.Add($"Error loading statuses: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingStatuses = false;
        }
    }

    private string GetStatusDisplayName(int statusId)
    {
        var status = globalStatuses.FirstOrDefault(s => s.Id == statusId);
        return status?.DisplayName ?? statusId.ToString();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if (form != null)
        {
            await form.Validate();
            if (!form.IsValid)
                return;
        }

        try
        {
            isProcessing = true;
            
            var httpClient = HttpClientFactory.CreateClient("API");
            
            // Update the type details
            var response = await httpClient.PutAsJsonAsync($"api/communication-types/{CommunicationType.Id}", model);
            
            if (response.IsSuccessStatusCode)
            {
                // Update the status mappings
                var statusRequest = new UpdateTypeStatusesRequest { StatusIds = selectedStatusIds.ToList() };
                var statusResponse = await httpClient.PutAsJsonAsync($"api/communication-types/{CommunicationType.Id}/statuses", statusRequest);
                
                if (!statusResponse.IsSuccessStatusCode)
                {
                    var statusError = await statusResponse.Content.ReadAsStringAsync();
                    Logger.LogWarning("Failed to update statuses: {Error}", statusError);
                    Snackbar.Add($"Type updated but statuses failed: {statusError}", Severity.Warning);
                }
                
                Logger.LogInformation("Updated communication type: {OldTypeCode} -> {NewTypeCode}", CommunicationType.TypeCode, model.TypeCode);
                Snackbar.Add($"Communication type '{model.DisplayName}' updated successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogWarning("Failed to update communication type: {Error}", error);
                Snackbar.Add($"Error updating type: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating communication type");
            Snackbar.Add($"Error updating type: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ConfirmDelete()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the communication type '{CommunicationType.DisplayName}'? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Communication Type?", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteType();
        }
    }

    private async Task DeleteType()
    {
        try
        {
            isDeleting = true;
            
            var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.DeleteAsync($"api/communication-types/{CommunicationType.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Deleted communication type: {TypeCode}", CommunicationType.TypeCode);
                Snackbar.Add($"Communication type '{CommunicationType.DisplayName}' deleted successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogWarning("Failed to delete communication type: {Error}", error);
                Snackbar.Add($"Error deleting type: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting communication type");
            Snackbar.Add($"Error deleting type: {ex.Message}", Severity.Error);
        }
        finally
        {
            isDeleting = false;
        }
    }
}