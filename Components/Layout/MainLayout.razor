@inherits LayoutComponentBase
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary" Fixed="true">
        <MudText Typo="Typo.h5" Class="ml-3">Commex Lifecycle</MudText>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudButton Color="Color.Inherit" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Logout" OnClick="Logout">
                    Logout
                </MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Color="Color.Inherit" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Login" OnClick="Login">
                    Login
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    
    <MudMainContent>
        <MudPaper Elevation="2" Square="true" Style="position: sticky; top: 64px; z-index: 100; background-color: white;">
            <MudTabs Elevation="0" Rounded="false" Centered="false" ApplyEffectsToContainer="false" ActivePanelIndex="activeTab" ActivePanelIndexChanged="OnTabChanged">
                <MudTabPanel Text="Communications" Icon="@Icons.Material.Filled.Email" />
                <MudTabPanel Text="Event Simulator" Icon="@Icons.Material.Filled.Science" />
                <MudTabPanel Text="Admin" Icon="@Icons.Material.Filled.AdminPanelSettings" />
            </MudTabs>
        </MudPaper>
        
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private int activeTab = 0;
    
    protected override void OnInitialized()
    {
        // Set active tab based on current URL
        SetActiveTabFromUrl();
        Navigation.LocationChanged += OnLocationChanged;
    }
    
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        SetActiveTabFromUrl();
        StateHasChanged();
    }
    
    private void SetActiveTabFromUrl()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var path = uri.LocalPath.ToLower();
        
        if (path.Contains("event-simulator"))
            activeTab = 1;
        else if (path.Contains("admin"))
            activeTab = 2;
        else
            activeTab = 0; // Default to Communications
    }
    
    private void OnTabChanged(int index)
    {
        activeTab = index;
        var url = index switch
        {
            0 => "/communications",
            1 => "/event-simulator",
            2 => "/admin",
            _ => "/communications"
        };
        Navigation.NavigateTo(url);
    }
    
    private void Login()
    {
        Navigation.NavigateTo("/authentication/login", true);
    }
    
    private void Logout()
    {
        Navigation.NavigateTo("/authentication/logout", true);
    }
    
    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
